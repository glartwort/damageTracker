name: DamageTracker Release Pipeline

env:
  # The URL used for the module's "Project URL" link on FoundryVTT's website.
  project_url: "https://github.com/${{ github.repository }}"

  # A URL that will always point to the latest manifest.
  # FoundryVTT uses this URL to check whether the current module version that
  # is installed is the latest version. This URL should NOT change,
  # otherwise FoundryVTT won't be able to perform this check.
  latest_manifest_url: "https://github.com/${{ github.repository }}/releases/latest/download/module.json"

  # The URL to the module archive associated with the module release being
  # processed by this workflow.
  release_module_url: "https://github.com/${{ github.repository }}/releases/download/${{ github.event.release.tag_name }}/module.zip"

  release_blob: "https://github.com/${{ github.repository }}/blob/${{ github.event.release.tag_name }}"

on:
  release:
    types: [published]

jobs:
  build:
    runs-on: ubuntu-latest
    if: github.event_name == 'release'
    permissions:
      contents: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # shrink the files
      - name: replace js and css files with minified ones
        uses: nizarmah/auto-minify@v3
        with:
          overwrite: true
          js_engine: "uglify-js"

      # get part of the tag after the `v`
      - name: Extract tag version number
        id: get_version
        uses: battila7/get-version-action@v2

      # Substitute the Manifest and Download URLs in the module.json
      - name: Substitute manifest and download links for versioned ones
        id: sub_manifest_link_version
        uses: microsoft/variable-substitution@v1
        with:
          files: "module.json"
        env:
          version: ${{ steps.get_version.outputs.version-without-v }}
          url: ${{ env.project_url }}
          manifest: ${{ env.latest_manifest_url }}
          download: ${{ env.release_module_url }}
          changelog: ${{ env.release_blob }}/ChangeLog.md
          bugs: ${{ env.project_url }}/issues
          readme: ${{ env.release_blob }}/README.md
          license: ${{ env.release_blob }}/LICENSE

      # Create a zip file with all files required by the module to add to the release
      - name: Create module zip
        run: |
          zip -r ./module.zip \
          module.json \
          README.md \
          LICENSE \
          ChangeLog.md \
          assets/ \
          languages/ \
          scripts/ \
          templates/ \
          styles/ \
          # Or whatever more

      # Create a release for this specific version
      - name: Create version release
        id: create_version_release
        uses: ncipollo/release-action@v1
        with:
          allowUpdates: true # Set this to false if you want to prevent updating existing releases
          name: ${{ github.event.release.name }}
          draft: ${{ github.event.release.unpublished }}
          prerelease: ${{ github.event.release.prerelease }}
          token: ${{ secrets.GITHUB_TOKEN }}
          artifacts: "./module.json, ./module.zip"
          tag: ${{ github.event.release.tag_name }}
          body: ${{ github.event.release.body }}
